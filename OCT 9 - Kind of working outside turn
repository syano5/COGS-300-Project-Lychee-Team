#define enA 9
#define in1 8
#define in2 7
#define enB 6
#define in3 5
#define in4 4

#define TRIG_PIN_FRONT 10
#define ECHO_PIN_FRONT 11
#define TRIG_PIN_SIDE 12
#define ECHO_PIN_SIDE 13

const int D_1 = 2, D_2 = 3;

// Wall following parameters
const float SET_POINT_WALL = 18.0;        // Target distance from wall (cm)
const float Kp_WALL = 3.5;                // Proportional gain (lower for smoother)
const int BASE_SPEED = 65;                // Base forward speed (slower)
const float DEADBAND = 10.0;              // Error deadband for straight driving (cm) - WIDE!

// Safe operating range - only correct if within this range
const float MIN_WALL_DISTANCE = 6.0;      // Too close to wall
const float MAX_WALL_DISTANCE = 40.0;     // Too far / losing wall (increased from 35)

// Corner detection - SIMPLIFIED
const float CORNER_DETECTION_THRESHOLD = 35.0;  // Wall distance that triggers corner turn
const int CORNER_TURN_SPEED = 60;              // Speed while turning at corner (slower)
const unsigned long CORNER_TURN_DURATION = 300; // How long to turn (ms)
const unsigned long DRIVE_FORWARD_DURATION = 1500; // Drive forward after turn to find wall

// Wall loss detection
const unsigned long WALL_LOSS_TIMEOUT = 2000;  // Stop if no wall detected for 2 seconds

// Front obstacle detection (INSIDE CORNER - not changing this)
const float FRONT_OBSTACLE_THRESHOLD = 25.0;    // Stop if obstacle this close
const float INSIDE_CORNER_THRESHOLD = 18.0;     // Turn left for inside corner (reduced from 20)
const float INSIDE_CORNER_MIN = 12.0;           // Minimum distance to trigger inside corner (increased from 10)

enum Mode {
  MANUAL,
  FOLLOW_ME,
  WALL_FOLLOW
};

enum CornerState {
  NORMAL_FOLLOWING,
  TURNING_RIGHT,
  DRIVING_FORWARD,
  INSIDE_PRE_TURN_PAUSE,
  INSIDE_CORNER_TURN,
  INSIDE_POST_TURN_PAUSE
};

Mode currentMode = MANUAL;
CornerState cornerState = NORMAL_FOLLOWING;
unsigned long cornerStateStartTime = 0;
unsigned long lastValidWallTime = 0;      // Track when we last saw a valid wall reading
unsigned long wallFollowStartTime = 0;    // Track when wall following started

void setup() {
  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(TRIG_PIN_FRONT, OUTPUT);
  pinMode(ECHO_PIN_FRONT, INPUT);
  pinMode(TRIG_PIN_SIDE, OUTPUT);
  pinMode(ECHO_PIN_SIDE, INPUT);
  pinMode(D_1, INPUT_PULLUP);
  pinMode(D_2, INPUT_PULLUP);
  
  Serial.begin(9600);
  Serial.println("Wall Following Robot Ready!");
  Serial.println("Commands: g=wall follow, w/s/a/d/x=manual, t=test sensors");
}

float getDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  long duration = pulseIn(echoPin, HIGH, 30000);
  if (duration == 0) return -1;
  
  return duration * 0.034 / 2.0;
}

void controlMotor(int motorA_speed, int motorB_speed) {
  // Motor A (right)
  if (motorA_speed >= 0) {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
  } else {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    motorA_speed = -motorA_speed;
  }
  analogWrite(enA, constrain(motorA_speed, 0, 255));
  
  // Motor B (left)
  if (motorB_speed >= 0) {
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
  } else {
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
    motorB_speed = -motorB_speed;
  }
  analogWrite(enB, constrain(motorB_speed, 0, 255));
}

void followWall() {
  float wallDistance = getDistance(TRIG_PIN_SIDE, ECHO_PIN_SIDE);
  float frontDistance = getDistance(TRIG_PIN_FRONT, ECHO_PIN_FRONT);
  
  // Handle corner turning state machine FIRST
  if (cornerState != NORMAL_FOLLOWING) {
    unsigned long elapsedTime = millis() - cornerStateStartTime;
    
    switch (cornerState) {
      case TURNING_RIGHT:
        // Turn right around outside corner
        controlMotor(-CORNER_TURN_SPEED, CORNER_TURN_SPEED);
        Serial.println(">>> TURNING RIGHT (OUTSIDE CORNER) <<<");
        if (elapsedTime >= CORNER_TURN_DURATION) {
          cornerState = DRIVING_FORWARD;
          cornerStateStartTime = millis();
          Serial.println(">>> DRIVING FORWARD TO FIND WALL <<<");
        }
        return;
        
      case DRIVING_FORWARD:
        {
          // Drive straight forward to find the wall
          controlMotor(BASE_SPEED, BASE_SPEED);
          
          // Check if we found the wall again
          float searchDistance = getDistance(TRIG_PIN_SIDE, ECHO_PIN_SIDE);
          if (searchDistance > 0 && searchDistance < MAX_WALL_DISTANCE) {
            Serial.print(">>> WALL FOUND at ");
            Serial.print(searchDistance);
            Serial.println(" cm - RESUMING WALL FOLLOW <<<");
            cornerState = NORMAL_FOLLOWING;
            lastValidWallTime = millis();
            return;
          }
          
          // Or timeout after driving forward for a while
          if (elapsedTime >= DRIVE_FORWARD_DURATION) {
            Serial.println(">>> DRIVE FORWARD TIMEOUT - RESUMING WALL FOLLOW <<<");
            cornerState = NORMAL_FOLLOWING;
            lastValidWallTime = millis();
          }
          return;
        }
        
      case INSIDE_PRE_TURN_PAUSE:
        {
          stopRobot();
          Serial.println(">>> PAUSED BEFORE LEFT TURN <<<");
          
          // Re-check front sensor before committing to turn
          float recheckFront = getDistance(TRIG_PIN_FRONT, ECHO_PIN_FRONT);
          Serial.print("Re-checking front: ");
          Serial.print(recheckFront);
          Serial.println(" cm");
          
          if (elapsedTime >= 1000) {
            if (recheckFront > 0 && recheckFront >= INSIDE_CORNER_MIN && recheckFront <= INSIDE_CORNER_THRESHOLD) {
              cornerState = INSIDE_CORNER_TURN;
              cornerStateStartTime = millis();
              Serial.println(">>> STARTING LEFT TURN <<<");
            } else {
              Serial.println(">>> FALSE ALARM - NO OBSTACLE - RESUMING <<<");
              cornerState = NORMAL_FOLLOWING;
              lastValidWallTime = millis();
            }
          }
          return;
        }
        
      case INSIDE_CORNER_TURN:
        {
          // Turn left for inside corner
          controlMotor(CORNER_TURN_SPEED, -CORNER_TURN_SPEED);
          Serial.println(">>> TURNING LEFT (INSIDE CORNER) <<<");
          
          // Check if we've turned enough
          float checkFront = getDistance(TRIG_PIN_FRONT, ECHO_PIN_FRONT);
          if (checkFront > INSIDE_CORNER_THRESHOLD || checkFront < 0) {
            cornerState = INSIDE_POST_TURN_PAUSE;
            cornerStateStartTime = millis();
            Serial.println(">>> LEFT TURN COMPLETE <<<");
            return;
          }
          
          // Safety timeout
          if (elapsedTime >= 1500) {
            Serial.println(">>> INSIDE CORNER TIMEOUT <<<");
            cornerState = INSIDE_POST_TURN_PAUSE;
            cornerStateStartTime = millis();
          }
          return;
        }
        
      case INSIDE_POST_TURN_PAUSE:
        {
          stopRobot();
          Serial.println(">>> PAUSED AFTER LEFT TURN <<<");
          if (elapsedTime >= 1000) {
            cornerState = NORMAL_FOLLOWING;
            lastValidWallTime = millis();
            Serial.println(">>> RESUMING WALL FOLLOW <<<");
          }
          return;
        }
    }
  }
  
  // OUTSIDE CORNER DETECTION - SIMPLIFIED
  // If no wall detected OR wall is very far, trigger right turn
  if ((wallDistance < 0 || wallDistance > CORNER_DETECTION_THRESHOLD) && cornerState == NORMAL_FOLLOWING) {
    Serial.print("OUTSIDE CORNER DETECTED! Wall distance: ");
    Serial.println(wallDistance);
    cornerState = TURNING_RIGHT;
    cornerStateStartTime = millis();
    return;
  }
  
  // If we have a valid wall reading, update the timer
  if (wallDistance > 0) {
    lastValidWallTime = millis();
  }
  
  // Check for front obstacle or inside corner (NOT CHANGING THIS)
  if (millis() - wallFollowStartTime > 2000) {
    if (frontDistance > 0 && frontDistance >= INSIDE_CORNER_MIN && frontDistance <= INSIDE_CORNER_THRESHOLD) {
      if (cornerState == NORMAL_FOLLOWING) {
        Serial.print("INSIDE CORNER DETECTED! Front distance: ");
        Serial.print(frontDistance);
        Serial.println(" cm - Preparing to turn left");
        cornerState = INSIDE_PRE_TURN_PAUSE;
        cornerStateStartTime = millis();
      }
    } else if (frontDistance > 0 && frontDistance < INSIDE_CORNER_MIN) {
      stopRobot();
      Serial.print("!!! FRONT OBSTACLE TOO CLOSE (");
      Serial.print(frontDistance);
      Serial.println(" cm) - STOPPED !!!");
      return;
    }
  }
  
  // Normal wall following with P-controller
  float error = wallDistance - SET_POINT_WALL;
  
  // Apply deadband for straighter driving
  if (abs(error) < DEADBAND) {
    controlMotor(BASE_SPEED, BASE_SPEED);
    Serial.print("Straight | Wall: ");
    Serial.print(wallDistance);
    Serial.println(" cm");
  } else {
    // Calculate steering correction
    float steeringCorrection = Kp_WALL * error;
    
    int rightMotorSpeed = BASE_SPEED - steeringCorrection;
    int leftMotorSpeed = BASE_SPEED + steeringCorrection;
    
    // Compensate for left drift
    rightMotorSpeed += 3;
    leftMotorSpeed -= 3;
    
    // Constrain to safe ranges
    rightMotorSpeed = constrain(rightMotorSpeed, 30, 110);
    leftMotorSpeed = constrain(leftMotorSpeed, 30, 110);
    
    controlMotor(rightMotorSpeed, leftMotorSpeed);
    
    Serial.print("Wall: ");
    Serial.print(wallDistance);
    Serial.print(" cm | Speeds L:");
    Serial.print(leftMotorSpeed);
    Serial.print(" R:");
    Serial.println(rightMotorSpeed);
  }
}

void followMe() {
  float distance = getDistance(TRIG_PIN_FRONT, ECHO_PIN_FRONT);
  const float SET_POINT = 25.0;
  const float Kp = 8.0;
  
  if (distance < 0 || distance > 100) {
    stopRobot();
    return;
  }
  
  float error = distance - SET_POINT;
  int motorSpeed = constrain((int)(Kp * error), -200, 200);
  
  if (abs(error) < 2.0) {
    stopRobot();
  } else {
    if (motorSpeed > 0 && motorSpeed < 50) motorSpeed = 50;
    else if (motorSpeed < 0 && motorSpeed > -50) motorSpeed = -50;
    controlMotor(motorSpeed, motorSpeed);
  }
}

void driveForward(int speed) { controlMotor(speed, speed); }
void driveBackward(int speed) { controlMotor(-speed, -speed); }
void turnLeft(int speed) { controlMotor(speed, speed / 2); }
void turnRight(int speed) { controlMotor(speed / 2, speed); }
void stopRobot() { controlMotor(0, 0); }

void loop() {
  if (Serial.available() > 0) {
    char command = Serial.read();
    int v1 = digitalRead(D_1);
    int v2 = digitalRead(D_2);
    
    switch (command) {
      case 'g':
        currentMode = WALL_FOLLOW;
        cornerState = NORMAL_FOLLOWING;
        lastValidWallTime = millis();
        wallFollowStartTime = millis();
        Serial.println("=== WALL FOLLOW MODE ACTIVE ===");
        break;
      case 'f':
        currentMode = FOLLOW_ME;
        Serial.println("=== FOLLOW ME MODE ===");
        break;
      case 't':
        Serial.print("Side: ");
        Serial.print(getDistance(TRIG_PIN_SIDE, ECHO_PIN_SIDE));
        Serial.print(" cm | Front: ");
        Serial.print(getDistance(TRIG_PIN_FRONT, ECHO_PIN_FRONT));
        Serial.println(" cm");
        break;
      case 'w':
        currentMode = MANUAL;
        driveForward(65);
        Serial.println("FORWARD");
        break;
      case 's':
        currentMode = MANUAL;
        driveBackward(65);
        Serial.println("BACKWARD");
        break;
      case 'a':
        currentMode = MANUAL;
        turnLeft(50);
        Serial.println("LEFT");
        break;
      case 'd':
        currentMode = MANUAL;
        turnRight(50);
        Serial.println("RIGHT");
        break;
      case 'x':
        currentMode = MANUAL;
        stopRobot();
        Serial.println("STOP");
        break;
    }
  }
  
  if (currentMode == WALL_FOLLOW) {
    followWall();
    delay(50);
  } else if (currentMode == FOLLOW_ME) {
    followMe();
    delay(50);
  } else {
    delay(10);
  }
}
